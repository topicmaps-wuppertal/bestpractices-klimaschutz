{"version":3,"sources":["helper/itemConverter.js","SecondaryInfo.js","Menu.js","helper/filter.js","App.js","reportWebVitals.js","index.js"],"names":["convertBPKlimaItemsToFeature","itemIn","a","addSVGToProps","i","thema","icon","item","text","standort","name","geometry","geojson","farbe","color","info","header","title","additionalInfo","beschreibung","subtitle","strasse","hausnummer","plz","stadt","url","website","bild","foto","type","selected","crs","properties","InfoPanel","useContext","FeatureCollectionContext","selectedFeature","items","angebot","undefined","weitereAngebote","filter","testItem","id","addOffers","ang","push","kategorien","subSections","SecondaryInfoPanelSection","bsStyle","style","fontSize","padding","paddingTop","bemerkung","kommentar","length","border","xwidth","Object","keys","map","key","index","paddingBottom","verticalAlign","val","join","minHeight4MainSextion","SecondaryInfo","titleIconName","mainSection","width","minHeight","alt","paddingLeft","paddingRight","float","src","MyMenu","setAppMenuActiveMenuSection","UIDispatchContext","filterState","filterMode","filteredItems","shownFeatures","FeatureCollectionDispatchContext","setFilterState","setFilterMode","katValues","themen","themenValues","kat","includes","filterConfiguration","mode","filters","values","setAll","setNone","colorizer","ModalApplicationMenu","menuIcon","menuTitle","menuIntroduction","className","to","containerId","smooth","delay","onClick","menuSections","Section","sectionKey","sectionTitle","term","count","getFilterHeader","sectionBsStyle","sectionContent","FilterPanel","DefaultSettingsPanel","ConfigurableDocBlocks","configs","getSimpleHelpForTM","itemFilterFunction","cat","host","getGazData","setGazData","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","bpklimastandorte","gazData","getGazDataForTopicIds","App","useState","useEffect","TopicMapContextProvider","featureItemsURL","getFeatureStyler","getGTMFeatureStyler","convertItemToFeature","clusteringOptions","iconCreateFunction","getClusterIconCreatorFunction","props","clusteringEnabled","additionalLayerConfiguration","fernwaerme","Icon","textAlign","initialActive","layer","StyledWMSTileLayer","layers","format","tiled","transparent","maxZoom","opacity","TopicMapComponent","applicationMenuTooltipString","modalMenu","gazetteerSearchPlaceholder","infoBox","GenericInfoBoxFromFeature","pixelwidth","config","displaySecondaryInfoAction","city","navigator","noun","singular","plural","noCurrentFeatureTitle","noCurrentFeatureContent","secondaryInfo","FeatureCollection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a09b57c.chunk.js","sourcesContent":["import { addSVGToProps, DEFAULT_SVG } from \"react-cismap/tools/svgHelper\";\nconst convertBPKlimaItemsToFeature = async (itemIn) => {\n  let item = await addSVGToProps(itemIn, (i) => i.thema.icon);\n  const text = item?.standort?.name || \"Kein Standort\";\n  const type = \"Feature\";\n  const selected = false;\n  const geometry = item?.standort?.geojson;\n  const color = item?.thema?.farbe;\n  // item.svg=DEFAULT_SVG.code;\n  item.color = item?.thema.farbe;\n  const info = {\n    header: item.thema.name,\n    title: text,\n    additionalInfo: item?.beschreibung,\n    subtitle: (\n      <span>\n        {item?.standort?.strasse} {item?.standort?.hausnummer}\n        <br />\n        {item?.standort?.plz} {item?.standort?.stadt}\n      </span>\n    ),\n  };\n  item.info = info;\n  item.url = item?.website;\n  if (item.bild) {\n    item.foto = \"https://www.wuppertal.de/geoportal/standort_klima/fotos/\" + item.bild;\n  }\n\n  return {\n    text,\n    type,\n    selected,\n    geometry,\n    crs: {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    },\n    properties: item,\n  };\n};\n\nexport default convertBPKlimaItemsToFeature;\n","import React, { useContext } from \"react\";\nimport { FeatureCollectionContext } from \"react-cismap/contexts/FeatureCollectionContextProvider\";\nimport SecondaryInfoPanelSection from \"react-cismap/topicmaps/SecondaryInfoPanelSection\";\nimport SecondaryInfo from \"react-cismap/topicmaps/SecondaryInfo\";\nconst InfoPanel = () => {\n  const { selectedFeature, items } = useContext(FeatureCollectionContext);\n\n  const angebot = selectedFeature?.properties;\n\n  if (angebot !== undefined) {\n    let foto;\n    if (angebot.bild !== undefined) {\n      foto = \"https://www.wuppertal.de/geoportal/standort_klima/fotos/\" + angebot.bild;\n    }\n\n    const weitereAngebote = items.filter(\n      (testItem) => testItem?.standort.id === angebot.standort.id && testItem.id !== angebot.id\n    );\n    //data structure for \"weitere Angebote\"\n    // gruppenwechsel for thema\n\n    const addOffers = {};\n    for (const ang of weitereAngebote) {\n      if (addOffers[ang.thema.name] === undefined) {\n        addOffers[ang.thema.name] = [];\n      }\n      addOffers[ang.thema.name].push(ang.kategorien);\n    }\n\n    const subSections = [\n      <SecondaryInfoPanelSection\n        key='standort'\n        bsStyle='info'\n        header={\"Standort: \" + angebot?.standort?.name}\n      >\n        <div style={{ fontSize: \"115%\", padding: \"10px\", paddingTop: \"0px\" }}>\n          {angebot?.standort && (\n            <b>\n              {angebot?.standort?.strasse} {angebot?.standort?.hausnummer}\n              <br />\n              {angebot?.standort?.plz} {angebot?.standort?.stadt}\n              <br />\n            </b>\n          )}\n\n          {angebot?.standort?.beschreibung && (\n            <div>\n              {angebot?.standort?.beschreibung}\n              <br />\n            </div>\n          )}\n          {angebot?.standort?.bemerkung && (\n            <div>\n              {angebot?.standort?.bemerkung} <br />\n            </div>\n          )}\n          {angebot?.standort?.kommentar && (\n            <div>\n              {angebot?.standort?.kommentar} <br />\n            </div>\n          )}\n        </div>\n      </SecondaryInfoPanelSection>,\n    ];\n\n    if (weitereAngebote.length > 0) {\n      subSections.push(\n        <SecondaryInfoPanelSection\n          key='weitereAngebote'\n          header='Weitere Angebote an diesem Standort:'\n          bsStyle='success'\n        >\n          <div style={{ fontSize: \"115%\", padding: \"10px\", paddingTop: \"0px\" }}>\n            <table border={0} style={{ xwidth: \"100%\" }}>\n              <tbody>\n                {Object.keys(addOffers).map((key, index) => {\n                  return (\n                    <tr style={{ paddingBottom: 10 }} key={\"addAng\" + index}>\n                      <td style={{ verticalAlign: \"top\", padding: 5 }} key={\"addAng.L.\" + index}>\n                        {key}:\n                      </td>\n                      <td style={{ verticalAlign: \"top\", padding: 5 }} key={\"addAng.R.\" + index}>\n                        {addOffers[key].map((val, index) => {\n                          return <div key={\"kategorien.\" + index}>{val.join(\", \")}</div>;\n                        })}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          {/* <pre>{JSON.stringify(addOffers, null, 2)}</pre> */}\n        </SecondaryInfoPanelSection>\n      );\n    }\n\n    let minHeight4MainSextion = undefined;\n    if (foto !== undefined) {\n      minHeight4MainSextion = 250;\n    }\n    return (\n      <SecondaryInfo\n        titleIconName='info-circle'\n        title={\"Datenblatt: \" + angebot.kategorien.join(\", \")}\n        mainSection={\n          <div style={{ width: \"100%\", minHeight: minHeight4MainSextion }}>\n            {foto !== undefined && (\n              <img\n                alt='Bild'\n                style={{\n                  paddingLeft: 10,\n                  paddingRight: 10,\n                  float: \"right\",\n                  paddingBottom: \"5px\",\n                }}\n                src={foto}\n                width='250'\n              />\n            )}\n            <div style={{ fontSize: \"115%\", padding: \"10px\", paddingTop: \"0px\" }}>\n              {angebot.beschreibung && (\n                <b>\n                  {angebot.beschreibung}\n                  <br />\n                </b>\n              )}\n              {angebot.bemerkung && (\n                <div>\n                  {angebot.bemerkung} <br />\n                </div>\n              )}\n              {angebot.kommentar && (\n                <div>\n                  {angebot.kommentar} <br />\n                </div>\n              )}\n            </div>\n          </div>\n        }\n        subSections={subSections}\n      />\n    );\n  } else {\n    return null;\n  }\n};\nexport default InfoPanel;\n","import { useContext } from \"react\";\nimport {\n  FeatureCollectionContext,\n  FeatureCollectionDispatchContext,\n} from \"react-cismap/contexts/FeatureCollectionContextProvider\";\nimport { UIDispatchContext } from \"react-cismap/contexts/UIContextProvider\";\nimport { getSimpleHelpForTM } from \"react-cismap/tools/uiHelper\";\nimport { Link } from \"react-scroll\";\nimport ModalApplicationMenu from \"react-cismap/topicmaps/menu/ModalApplicationMenu\";\nimport Section from \"react-cismap/topicmaps/menu/Section\";\nimport FilterPanel from \"react-cismap/topicmaps/menu/FilterPanel\";\nimport DefaultSettingsPanel from \"react-cismap/topicmaps/menu/DefaultSettingsPanel\";\nimport ConfigurableDocBlocks from \"react-cismap/topicmaps/ConfigurableDocBlocks\";\n\nconst MyMenu = () => {\n  const { setAppMenuActiveMenuSection } = useContext(UIDispatchContext);\n  const { filterState, filterMode, filteredItems, shownFeatures } = useContext(\n    FeatureCollectionContext\n  );\n  const { setFilterState, setFilterMode } = useContext(FeatureCollectionDispatchContext);\n\n  const { items } = useContext(FeatureCollectionContext);\n\n  const kategorien = [];\n  const katValues = [];\n  const themen = [];\n  const themenValues = [];\n\n  for (const item of items || []) {\n    for (const kat of item.kategorien) {\n      if (!kategorien.includes(kat)) {\n        katValues.push({ key: kat });\n        kategorien.push(kat);\n      }\n    }\n    if (!themen.includes(item.thema.id)) {\n      themen.push(item.thema.id);\n      themenValues.push({ key: item.thema.id, title: item.thema.name, color: item.thema.farbe });\n    }\n  }\n\n  const filterConfiguration = {\n    mode: \"tabs\", // list or tabs\n    filters: [\n      {\n        title: \"Themen\",\n        key: \"themen\",\n        icon: \"folder\",\n        type: \"tags\", //\"checkBoxes\",\n        values: themenValues,\n        setAll: () => {\n          setFilterState({ ...filterState, themen });\n        },\n        setNone: () => {\n          setFilterState({ ...filterState, themen: [] });\n        },\n        colorizer: (item, selected) => (selected ? item.color : \"#eeeeee\"),\n      },\n      {\n        title: \"Kategorien\",\n        key: \"kategorien\",\n        icon: \"tags\",\n        type: \"tags\",\n        values: katValues,\n        setAll: () => {\n          setFilterState({ ...filterState, kategorien });\n        },\n        setNone: () => {\n          setFilterState({ ...filterState, kategorien: [] });\n        },\n      },\n    ],\n  };\n\n  if ((filterState === undefined) & (items !== undefined)) {\n    setFilterState({ kategorien, themen });\n  }\n  if ((filterMode === undefined) & (items !== undefined)) {\n    setFilterMode(\"themen\");\n  }\n  const topicMapTitle = \"Best Practice Klimaschutz\";\n  const simpleHelp = undefined;\n\n  const getFilterHeader = () => {\n    const count = filteredItems?.length || 0;\n\n    let term;\n    if (count === 1) {\n      term = \"Standort\";\n    } else {\n      term = \"Standorte\";\n    }\n\n    return `Meine Klimaschutzstandorte (${count} ${term} gefunden, davon ${\n      shownFeatures?.length || \"0\"\n    } in der Karte)`;\n  };\n\n  return (\n    <ModalApplicationMenu\n      menuIcon={\"bars\"}\n      menuTitle={\"Meine Klimaschutzstandorte, Einstellungen und Kompaktanleitung\"}\n      menuIntroduction={\n        <span>\n          Benutzen Sie die Auswahlmöglichkeiten unter{\" \"}\n          <Link\n            className='useAClassNameToRenderProperLink'\n            to='filter'\n            containerId='myMenu'\n            smooth={true}\n            delay={100}\n            onClick={() => setAppMenuActiveMenuSection(\"filter\")}\n          >\n            Meine Klimaschutzstandorte\n          </Link>\n          , um die in der Karte angezeigten vorbildlichen Klimaschutzstandorte auf die für Sie\n          relevanten Themen zu beschränken. Über{\" \"}\n          <Link\n            className='useAClassNameToRenderProperLink'\n            to='settings'\n            containerId='myMenu'\n            smooth={true}\n            delay={100}\n            onClick={() => setAppMenuActiveMenuSection(\"settings\")}\n          >\n            Einstellungen\n          </Link>{\" \"}\n          können Sie die Darstellung der Hintergrundkarte und der klimarelevanten Themen an Ihre\n          Interesse anpassen. Wählen Sie die{\" \"}\n          <Link\n            className='useAClassNameToRenderProperLink'\n            to='help'\n            containerId='myMenu'\n            smooth={true}\n            delay={100}\n            onClick={() => setAppMenuActiveMenuSection(\"help\")}\n          >\n            Kompaktanleitung\n          </Link>{\" \"}\n          für detailliertere Bedienungsinformationen.\n        </span>\n      }\n      menuSections={[\n        <Section\n          key='filter'\n          sectionKey='filter'\n          sectionTitle={getFilterHeader()}\n          sectionBsStyle='primary'\n          sectionContent={<FilterPanel filterConfiguration={filterConfiguration} />}\n        />,\n        <DefaultSettingsPanel key='settings' />,\n        <Section\n          key='help'\n          sectionKey='help'\n          sectionTitle='Kompaktanleitung'\n          sectionBsStyle='default'\n          sectionContent={\n            <ConfigurableDocBlocks configs={getSimpleHelpForTM(topicMapTitle, simpleHelp)} />\n          }\n        />,\n      ]}\n    />\n  );\n};\nexport default MyMenu;\n","const itemFilterFunction = ({ filterState, filterMode }) => {\n  return (item) => {\n    if (filterMode === \"themen\") {\n      return filterState?.themen?.includes(item.thema.id);\n    } else if (filterMode === \"kategorien\") {\n      for (const cat of item.kategorien) {\n        if (filterState?.kategorien?.includes(cat)) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  };\n};\nexport default itemFilterFunction;\n","import { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport { md5FetchText, fetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\n\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\n\nimport convertBPKlimaItemsToFeature from \"./helper/itemConverter\";\nimport InfoPanel from \"./SecondaryInfo\";\nimport MyMenu from \"./Menu\";\nimport itemFilterFunction from \"./helper/filter\";\n\nimport Icon from \"react-cismap/commons/Icon\";\nimport StyledWMSTileLayer from \"react-cismap/StyledWMSTileLayer\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nconst getGazData = async (setGazData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n  sources.bpklimastandorte = await md5FetchText(prefix, host + \"/data/bpklimastandorte.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"bpklimastandorte\",\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n};\n\nfunction App() {\n  const [gazData, setGazData] = useState([]);\n  useEffect(() => {\n    getGazData(setGazData);\n  }, []);\n  return (\n    <TopicMapContextProvider\n      featureItemsURL={host + \"/data/bpklima.data.json\"}\n      getFeatureStyler={getGTMFeatureStyler}\n      convertItemToFeature={convertBPKlimaItemsToFeature}\n      clusteringOptions={{\n        iconCreateFunction: getClusterIconCreatorFunction(30, (props) => props.color),\n      }}\n      clusteringEnabled={true}\n      itemFilterFunction={itemFilterFunction}\n      additionalLayerConfiguration={{\n        fernwaerme: {\n          title: (\n            <span>\n              Fernwärme{\" \"}\n              <Icon\n                style={{\n                  color: \"#EEB48C\",\n                  width: \"30px\",\n                  textAlign: \"center\",\n                }}\n                name={\"circle\"}\n              />\n            </span>\n          ),\n          initialActive: true,\n          layer: (\n            <StyledWMSTileLayer\n              key={\"fernwaermewsw\"}\n              url='https://maps.wuppertal.de/deegree/wms'\n              layers='fernwaermewsw '\n              format='image/png'\n              tiled='true'\n              transparent='true'\n              maxZoom={19}\n              opacity={0.7}\n            />\n          ),\n        },\n      }}\n    >\n      <TopicMapComponent\n        applicationMenuTooltipString='Filtern | Einstellungen | Kompaktanleitung'\n        modalMenu={<MyMenu />}\n        gazData={gazData}\n        gazetteerSearchPlaceholder='Stadtteil | Adresse | POI | Standorte'\n        infoBox={\n          <GenericInfoBoxFromFeature\n            pixelwidth={400}\n            config={{\n              displaySecondaryInfoAction: true,\n              city: \"Wuppertal\",\n              navigator: {\n                noun: {\n                  singular: \"Standort\",\n                  plural: \"Standorte\",\n                },\n              },\n              noCurrentFeatureTitle: \"Keine Standorte gefunden\",\n              noCurrentFeatureContent: \"\",\n            }}\n          />\n        }\n        secondaryInfo={<InfoPanel />}\n      >\n        <FeatureCollection />\n      </TopicMapComponent>\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}